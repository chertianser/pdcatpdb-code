import sys
import numpy as np
import scipy.integrate

OFile = 'microkinetics/hc-3h-ptbu3/hc-3h-ptbu3-results.csv'

# Parameters
species = 26
trep = 0.01 # s
dt = 0.001 # maximum timestep for solving the system
tfin = 10.0 # Final Time
xini = np.zeros(species)
xini[20] = 0.02
xini[19] = 0.001
xini[21] = 0.07
# Model at T=333.15 K
def model(t,x):
    dxdt = np.zeros(26)
    
    #Constants
    k00 = 2.4621886739e+10
    k01 = 2.4621886739e+10
    k02 = 7.5386278573e+08
    k03 = 2.4621886739e+10
    k04 = 4.9146868373e+06
    k05 = 3.7240576183e+12
    k06 = 3.6605013877e+09
    k07 = 3.3034284189e-15
    k08 = 3.3069557675e+06
    k09 = 1.1731045171e+11
    k10 = 3.8721941619e-10
    k11 = 2.3768112337e+04
    k12 = 2.4621886739e+10
    k13 = 2.1157899826e-08
    k14 = 4.5557960935e+06
    k15 = 5.7303649700e+06
    k16 = 6.4223620641e+05
    k17 = 4.4665137179e+02
    k18 = 1.7788796727e+03
    k19 = 3.1662242011e+02
    k20 = 8.1637522023e+01
    k21 = 1.0196355067e+00
    k22 = 2.4621886739e+10
    k23 = 1.6200230343e-02
    k24 = 5.0312027835e+07
    k25 = 4.1364278683e+02
    k26 = 6.4538552557e+08
    k27 = 2.5558022810e+09
    k28 = 5.2731812388e+05
    k29 = 1.0764030206e+03
    k30 = 1.1700836674e+10
    k31 = 9.3003252967e-08
    k32 = 3.2931971532e+11
    k33 = 1.2959583582e+00
    k34 = 2.4621886739e+10
    k35 = 1.7954670871e+07
    k36 = 4.2618422424e+07
    k37 = 2.4621886739e+10
    k38 = 2.4621886739e+10
    k39 = 1.5307561155e+08
    k40 = 2.4621886739e+10
    k41 = 1.2719028481e+06
    k42 = 9.6271253107e+08
    k43 = 2.4621886739e+10
    
    #Ratelaws
    r00 = k00*x[19]
    r01 = k01*x[0]*x[0]
    r02 = k02*x[0]*x[20]
    r03 = k03*x[1]
    r04 = k04*x[1]
    r05 = k05*x[2]
    r06 = k06*x[2]
    r07 = k07*x[3]
    r08 = k08*x[3]*x[21]
    r09 = k09*x[4]*x[22]
    r10 = k10*x[4]
    r11 = k11*x[5]
    r12 = k12*x[5]
    r13 = k13*x[0]*x[23]
    r14 = k14*x[1]
    r15 = k15*x[6]
    r16 = k16*x[6]
    r17 = k17*x[7]
    r18 = k18*x[7]*x[21]
    r19 = k19*x[8]*x[22]
    r20 = k20*x[8]
    r21 = k21*x[9]
    r22 = k22*x[9]
    r23 = k23*x[0]*x[24]
    r24 = k24*x[11]
    r25 = k25*x[12]
    r26 = k26*x[13]
    r27 = k27*x[14]
    r28 = k28*x[14]
    r29 = k29*x[15]
    r30 = k30*x[15]
    r31 = k31*x[16]*x[25]
    r32 = k32*x[17]
    r33 = k33*x[18]*x[25]
    r34 = k34*x[3]
    r35 = k35*x[10]*x[22]
    r36 = k36*x[3]*x[20]
    r37 = k37*x[11]
    r38 = k38*x[12]
    r39 = k39*x[13]*x[22]
    r40 = k40*x[15]
    r41 = k41*x[17]*x[22]
    r42 = k42*x[16]
    r43 = k43*x[18]*x[22]
    
    #MassBalances
    dxdt[0] = +2.0*r00-2.0*r01-r02+r03+r12-r13+r22-r23
    dxdt[1] = +r02-r03-r04+r05-r14+r15
    dxdt[2] = +r04-r05-r06+r07
    dxdt[3] = +r06-r07-r08+r09-r34+r35-r36+r37
    dxdt[4] = +r08-r09-r10+r11
    dxdt[5] = +r10-r11-r12+r13
    dxdt[6] = +r14-r15-r16+r17
    dxdt[7] = +r16-r17-r18+r19
    dxdt[8] = +r18-r19-r20+r21
    dxdt[9] = +r20-r21-r22+r23
    dxdt[10] = +r34-r35
    dxdt[11] = -r24+r25+r36-r37
    dxdt[12] = +r24-r25-r38+r39
    dxdt[13] = -r26+r27+r38-r39
    dxdt[14] = +r26-r27-r28+r29
    dxdt[15] = +r28-r29-r30+r31-r40+r41
    dxdt[16] = +r30-r31-r42+r43
    dxdt[17] = -r32+r33+r40-r41
    dxdt[18] = +r32-r33+r42-r43
    dxdt[19] = -r00+r01
    dxdt[20] = -r02+r03-r36+r37
    dxdt[21] = -r08+r09-r18+r19
    dxdt[22] = +r08-r09+r18-r19+r34-r35+r38-r39+r40-r41+r42-r43
    dxdt[23] = +r12-r13
    dxdt[24] = +r22-r23
    dxdt[25] = +r30-r31+r32-r33
    
    return dxdt
    
def jacobian(t,x):
    Jac = np.zeros(shape=(26,26))
    
    #Constants
    k00 = 2.4621886739e+10
    k01 = 2.4621886739e+10
    k02 = 7.5386278573e+08
    k03 = 2.4621886739e+10
    k04 = 4.9146868373e+06
    k05 = 3.7240576183e+12
    k06 = 3.6605013877e+09
    k07 = 3.3034284189e-15
    k08 = 3.3069557675e+06
    k09 = 1.1731045171e+11
    k10 = 3.8721941619e-10
    k11 = 2.3768112337e+04
    k12 = 2.4621886739e+10
    k13 = 2.1157899826e-08
    k14 = 4.5557960935e+06
    k15 = 5.7303649700e+06
    k16 = 6.4223620641e+05
    k17 = 4.4665137179e+02
    k18 = 1.7788796727e+03
    k19 = 3.1662242011e+02
    k20 = 8.1637522023e+01
    k21 = 1.0196355067e+00
    k22 = 2.4621886739e+10
    k23 = 1.6200230343e-02
    k24 = 5.0312027835e+07
    k25 = 4.1364278683e+02
    k26 = 6.4538552557e+08
    k27 = 2.5558022810e+09
    k28 = 5.2731812388e+05
    k29 = 1.0764030206e+03
    k30 = 1.1700836674e+10
    k31 = 9.3003252967e-08
    k32 = 3.2931971532e+11
    k33 = 1.2959583582e+00
    k34 = 2.4621886739e+10
    k35 = 1.7954670871e+07
    k36 = 4.2618422424e+07
    k37 = 2.4621886739e+10
    k38 = 2.4621886739e+10
    k39 = 1.5307561155e+08
    k40 = 2.4621886739e+10
    k41 = 1.2719028481e+06
    k42 = 9.6271253107e+08
    k43 = 2.4621886739e+10
    
    #Non-zero Elements
    Jac[0,0] = -2.0*2.0*k01*x[0]-k02*x[20]-k13*x[23]-k23*x[24]
    Jac[0,1] = +k03
    Jac[0,5] = +k12
    Jac[0,9] = +k22
    Jac[0,19] = +2.0*k00
    Jac[0,20] = -k02*x[0]
    Jac[0,23] = -k13*x[0]
    Jac[0,24] = -k23*x[0]
    Jac[1,0] = +k02*x[20]
    Jac[1,1] = -k03-k04-k14
    Jac[1,2] = +k05
    Jac[1,6] = +k15
    Jac[1,20] = +k02*x[0]
    Jac[2,1] = +k04
    Jac[2,2] = -k05-k06
    Jac[2,3] = +k07
    Jac[3,2] = +k06
    Jac[3,3] = -k07-k08*x[21]-k34-k36*x[20]
    Jac[3,4] = +k09*x[22]
    Jac[3,10] = +k35*x[22]
    Jac[3,11] = +k37
    Jac[3,20] = -k36*x[3]
    Jac[3,21] = -k08*x[3]
    Jac[3,22] = +k09*x[4]+k35*x[10]
    Jac[4,3] = +k08*x[21]
    Jac[4,4] = -k09*x[22]-k10
    Jac[4,5] = +k11
    Jac[4,21] = +k08*x[3]
    Jac[4,22] = -k09*x[4]
    Jac[5,0] = +k13*x[23]
    Jac[5,4] = +k10
    Jac[5,5] = -k11-k12
    Jac[5,23] = +k13*x[0]
    Jac[6,1] = +k14
    Jac[6,6] = -k15-k16
    Jac[6,7] = +k17
    Jac[7,6] = +k16
    Jac[7,7] = -k17-k18*x[21]
    Jac[7,8] = +k19*x[22]
    Jac[7,21] = -k18*x[7]
    Jac[7,22] = +k19*x[8]
    Jac[8,7] = +k18*x[21]
    Jac[8,8] = -k19*x[22]-k20
    Jac[8,9] = +k21
    Jac[8,21] = +k18*x[7]
    Jac[8,22] = -k19*x[8]
    Jac[9,0] = +k23*x[24]
    Jac[9,8] = +k20
    Jac[9,9] = -k21-k22
    Jac[9,24] = +k23*x[0]
    Jac[10,3] = +k34
    Jac[10,10] = -k35*x[22]
    Jac[10,22] = -k35*x[10]
    Jac[11,3] = +k36*x[20]
    Jac[11,11] = -k24-k37
    Jac[11,12] = +k25
    Jac[11,20] = +k36*x[3]
    Jac[12,11] = +k24
    Jac[12,12] = -k25-k38
    Jac[12,13] = +k39*x[22]
    Jac[12,22] = +k39*x[13]
    Jac[13,12] = +k38
    Jac[13,13] = -k26-k39*x[22]
    Jac[13,14] = +k27
    Jac[13,22] = -k39*x[13]
    Jac[14,13] = +k26
    Jac[14,14] = -k27-k28
    Jac[14,15] = +k29
    Jac[15,14] = +k28
    Jac[15,15] = -k29-k30-k40
    Jac[15,16] = +k31*x[25]
    Jac[15,17] = +k41*x[22]
    Jac[15,22] = +k41*x[17]
    Jac[15,25] = +k31*x[16]
    Jac[16,15] = +k30
    Jac[16,16] = -k31*x[25]-k42
    Jac[16,18] = +k43*x[22]
    Jac[16,22] = +k43*x[18]
    Jac[16,25] = -k31*x[16]
    Jac[17,15] = +k40
    Jac[17,17] = -k32-k41*x[22]
    Jac[17,18] = +k33*x[25]
    Jac[17,22] = -k41*x[17]
    Jac[17,25] = +k33*x[18]
    Jac[18,16] = +k42
    Jac[18,17] = +k32
    Jac[18,18] = -k33*x[25]-k43*x[22]
    Jac[18,22] = -k43*x[18]
    Jac[18,25] = -k33*x[18]
    Jac[19,0] = +2.0*k01*x[0]
    Jac[19,19] = -k00
    Jac[20,0] = -k02*x[20]
    Jac[20,1] = +k03
    Jac[20,3] = -k36*x[20]
    Jac[20,11] = +k37
    Jac[20,20] = -k02*x[0]-k36*x[3]
    Jac[21,3] = -k08*x[21]
    Jac[21,4] = +k09*x[22]
    Jac[21,7] = -k18*x[21]
    Jac[21,8] = +k19*x[22]
    Jac[21,21] = -k08*x[3]-k18*x[7]
    Jac[21,22] = +k09*x[4]+k19*x[8]
    Jac[22,3] = +k08*x[21]+k34
    Jac[22,4] = -k09*x[22]
    Jac[22,7] = +k18*x[21]
    Jac[22,8] = -k19*x[22]
    Jac[22,10] = -k35*x[22]
    Jac[22,12] = +k38
    Jac[22,13] = -k39*x[22]
    Jac[22,15] = +k40
    Jac[22,16] = +k42
    Jac[22,17] = -k41*x[22]
    Jac[22,18] = -k43*x[22]
    Jac[22,21] = +k08*x[3]+k18*x[7]
    Jac[22,22] = -k09*x[4]-k19*x[8]-k35*x[10]-k39*x[13]-k41*x[17]-k43*x[18]
    Jac[23,0] = -k13*x[23]
    Jac[23,5] = +k12
    Jac[23,23] = -k13*x[0]
    Jac[24,0] = -k23*x[24]
    Jac[24,9] = +k22
    Jac[24,24] = -k23*x[0]
    Jac[25,15] = +k30
    Jac[25,16] = -k31*x[25]
    Jac[25,17] = +k32
    Jac[25,18] = -k33*x[25]
    Jac[25,25] = -k31*x[16]-k33*x[18]
    
    return Jac
    
t = np.arange(0,tfin,trep)
# Time indexes and Out predefinition
solution = scipy.integrate.solve_ivp(fun=model, jac=jacobian, y0=xini,
                                     t_span=(0,tfin), t_eval=t,
                                     method='LSODA', max_step=min(dt,trep),
                                     rtol=1e-07,atol=1e-12)

if not solution.success:
    print(solution.message)
else:
    print(f"""
          nfev={solution.nfev}
          njev={solution.njev}
          nlu={solution.nlu}
          status={solution.status}
          success={solution.success}
          """)
    x = np.zeros(shape=(len(solution.t),species+1))
    x[:,0] = solution.t
    x[:,1:] = solution.y[:,:].transpose()
    np.savetxt(OFile,x,delimiter='\t')
